class BinaryTreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

class LinkedListNode:
    def __init__(self, value):
        self.value = value
        self.tree_root = None  # Root of the binary tree
        self.next = None

class Nucleus:
    def __init__(self):
        self.dendrites = []  # List of head nodes for each linked list

    def add_dendrite(self, head_node):
        self.dendrites.append(head_node)

# Example usage:
if __name__ == "__main__":
    nucleus = Nucleus()

    # Create first dendrite (linked list)
    head1 = LinkedListNode("Dendrite1_Node1")
    head1.tree_root = BinaryTreeNode(1)
    head1.tree_root.left = BinaryTreeNode(2)
    head1.tree_root.right = BinaryTreeNode(3)

    node2 = LinkedListNode("Dendrite1_Node2")
    node2.tree_root = BinaryTreeNode(4)
    head1.next = node2

    nucleus.add_dendrite(head1)

    # Create second dendrite (linked list)
    head2 = LinkedListNode("Dendrite2_Node1")
    head2.tree_root = BinaryTreeNode(5)
    nucleus.add_dendrite(head2)

    # Print structure
    for i, dendrite in enumerate(nucleus.dendrites):
        print(f"Dendrite {i+1}:")
        current = dendrite
        while current:
            print(f"  Node: {current.value}, Tree Root: {current.tree_root.value}")
            current = current.next